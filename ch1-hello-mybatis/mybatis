mybatis

第一章
    1. 三层架构
        界面层：和用户打交道的，接受用户的请求参数，显示处理结果的。（jsp，html，servlet）
        业务逻辑层：接受了界面层传递的数据，计算逻辑，调用数据库，获取数据
        数据访问层：就是访问数据库，执行对数据的查询，修改，删除等

        三层对应的包：
            界面层：controller包（servlet）
            业务逻辑层：service包（XXXservice类）
            数据访问层：dao包（XXXDao类）

        三层中类的交互
            用户使用界面层 --> 业务逻辑层 --> 业务逻辑层 --> 数据访问层 --> 数据库（mysql）

        三层对应的处理框架
            界面层--servlet---springmvc（框架）
            业务逻辑层---service类---spring
            数据访问层---dao类--mybatis

    2. 框架
        框架是一个模板
            1.框架中定义好了一些功能，这些功能是可用的。
            2.可以加入项目中自己的功能，这些功能可以利用框架中写好的功能。

        框架是一个软件，半成品的软件，定义好了一些基础功能，需要加入你的功能就是完整的。
        基础功能是可重复利用的，可升级的。

        框架特点：
            1.框架一般不是全能的，不能做所有事情
            2.框架是针对某一个领域有效，特长在某一个方面，比如mybatis做数据库操作强，但是不能做其他的。
            3.框架是一个软件

mybatis框架
    一个框架，早期叫做ibatis，代码在github。
    Mybatis SQL Mapper Framework for Java(sql映射框架)
    1)  sql mapper: sql映射
        可以把数据库表中的一行数据 映射为一个java对象。
        一行数据可以看做是一个java对象。操作这个对象，就相当于操作表中的数据。

    2) Data Access Object (DAOs)：数据访问，对数据库执行增删改查。

mybatis提供了哪些功能：
    1. 提供了创建Connection，Statement，ResultSet的能力，不用开发人员创建这些对象了
    2. 提供了执行sql语句的能力，不用你执行sql
    3. 提供了循环sql，把sql结果转为java对象，List集合的能力
    4. 提供了关闭资源的能力，不用你关闭Connection，Statement，ResultSet

开发人员做的是：提供sql语句
最后是：开发人员提供sql语句--mybatis处理sql--开发人员得到List集合或者java对象

总结：
    mybatis是一个sql映射框架，提供数据库的操作能力。增强的JDBC，
    使用mybatis让开发人员集中写sql语句，不必关心Connection，Statement，ResultSet的创建，销毁，sql的执行。

第二章：
1 主要类的介绍
    1）Resources：mybatis中的一个类，负责读取主配置文件
    InputStream in = Resources.getResourceAsStream(config);

    2）SqlSessionFactoryBuilder：创建SqlSessionFactory对象
    SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();
    //创建SqlSessionFactory对象
    SqlSessionFactory factory = builder.build(in);

    3）SqlSessionFactory：重量级对象，程序创建一个对象耗时较长，使用资源比较多。
        在整个项目中，有一个就够用了。
        SqlSessionFactory接口，接口实现类：DefaultSqlSessionFactory
        SqlSessionFactory作用：获取SqlSession对象。
        SqlSession sqlSession = factory.openSession();

        openSession()方法说明：
            1.openSession():无参数的，获取的是非自动提交事务的SqlSession
            2.openSession(true):有参数的，获取的是自动提交事务的SqlSession

    4）SqlSession：
        SqlSession接口：定义了操作数据库方法 例如selectOne, selectList() ....
        SqlSession接口的默认实现类DefaultSqlSession

        使用要求：SqlSession对象不是线程安全的，需要在方法内部使用，在执行sql语句之前，使用openSession()获取
        在执行完sql语句后，需要关闭，执行SqlSession.close()

第三章：
    1.动态代理：使用SqlSession.getMapper(dao接口.class)获取这个dao接口的对象
    2.传入参数：从Java代码中把数据传入到mapper文件的sql语句中。
        1）parameterType：写在Mapper文件中的一个属性。表示dao接口中方法的参数的数据类型。

        一个简单类型的参数：
          简单类型：mybatis把java的基本数据类型和string都叫简单类型

        在mapper文件中获取简单类型的一个参数的值，使用#{任意字符}*/
        public Student selectStudentById(Integer id);
        mapper: select id,name,email,age from student where id=#{id}

    3.多个参数，使用@param命名参数
    接口 public List<Student> selectMultiParam(@Param("myname") String name, @Param("myage") Integer age)
    使用@param（"参数名"）String name

    4. # 和 $
        select id,name,email,age from student where id=#{studentId}
        # 的结果：select id,name,email,age from student where id=？

        select id,name,email,age from student where id=#{studentId}
        $ 的结果：select id,name,email,age from student where id=2002

        String sql="select id,name,email,age from student where id=" + "2002"；
        使用的是Statement对象执行sql，效率比PreparedStatement低。

        $：可以替换表名和列名，如果可以确定数据是安全的，可以使用$。

        # 和 $的区别：
        1、#使用？在sql语句中占位的，使用PreparedStatement执行sql，效率高
        2、#能避免sql注入，更安全。
        3、$不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低
        4、$有sql注入风险，缺乏安全性
        5、$：可以替换表名或者列名






















